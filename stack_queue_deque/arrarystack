# coding:utf-8


class Empty(Exception):
    """error for stack"""
    pass


class Arraystack(object):
    """LILO"""
    def __init__(self):
        self.__data = []
        self.__count = 0

    def __len__(self):
        return self.__count

    def is_empty(self):
        return not self.__count

    def push(self, e):
        self.__data.append(e)
        self.__count += 1

    def top(self):
        if self.is_empty():
            raise Empty('star=ck is empty')
        return self.__data[-1]

    def pop(self):
        if self.is_empty():
            raise Empty('star=ck is empty')
        return self.__data.pop()


def is_match(expr):
    """用栈判断公式是否符合规定"""
    left = '([{'
    right = ')]}'
    S = Arraystack()
    for c in expr:
        if c in left:
            S.push(c)
        if c in right:
            if S.is_empty():
                return False
            elif right.index(c) != left.index(S.pop()):
                return False
    return S.is_empty()


def is_match_html(raw):
    """用栈判断html的tag是否匹配完全"""
    S = Arraystack()
    j = raw.find("<")
    while j != -1:
        k = raw.find(">")
        if k == -1:
            return False
        tag = raw[j+1:k]
        if not tag.startswith('/'):
            S.push(tag)
        else:
            if S.is_empty():
                return False
            elif tag[1:] != S.pop():
                return False
        j = raw.find("<", k+1)
    return S.is_empty()


if __name__ == '__main__':
    pass
